{"version":3,"sources":["utils/index.js","components/VirtualCollectionBasic.js","App.js","registerServiceWorker.js","index.js","logo.svg"],"names":["BADGE_COLORS","itemStyle","borderRadius","marginBottom","fontSize","color","display","alignItems","justifyContent","VirtualCollectionBasic","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","itemSize","dimensions","columnWidth","getColumnWidth","rowHeight","getRowHeight","state","size","width","distance","gridWidth","Math","floor","height","columnCount","ceil","collection","length","_this2","_ref","columnIndex","key","rowIndex","style","_this2$props","_this2$props$dimensio","index","item","react_default","a","createElement","objectSpread","backgroundColor","_this3","_this$state","es","disableHeight","_ref2","getColumnCount","rowCount","getRowCount","cellRenderer","_ref3","isScrolling","scrollTop","autoHeight","cellRangeRenderer","estimatedColumnSizex","overscanRowCount","Component","defaultProps","App","Array","fill","map","className","src","logo","alt","href","target","rel","version","viewBox","aria-hidden","fill-rule","d","VirtualCollectionBasic_VirtualCollectionBasic","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.08565fdc.chunk.js","sourcesContent":["const BADGE_COLORS = [\n    '#f44336',\n    '#3f51b5',\n    '#4caf50',\n    '#ff9800',\n    '#2196f3',\n    '#374046',\n    '#cddc39',\n    '#2196f3',\n    '#9c27b0',\n    '#ffc107',\n    '#009688',\n    '#673ab7',\n    '#ffeb3b',\n    '#cddc39',\n    '#795548',\n  ];\n\n  export const getItemColor = (i) => BADGE_COLORS[i % BADGE_COLORS.length];","import React, {Component} from 'react';\nimport { number, shape, arrayOf, object } from 'prop-types';\nimport {\n    Grid,\n    WindowScroller,\n    AutoSizer,\n} from 'react-virtualized';\nimport { getItemColor } from '../utils';\n\nconst itemStyle = {\n    borderRadius: '0.5rem',\n    marginBottom: '0.5rem',\n    fontSize: '20px',\n    color: 'white',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n};\nexport default class VirtualCollectionBasic extends Component {\n    static propTypes = {\n        distance: number,\n        dimensions: shape({\n            width: number,\n            height: number,\n        }),\n        collection: arrayOf(object).isRequired,\n    };\n    static defaultProps = {\n        distance: 20,\n        dimensions: {width: 150, height: 300},\n    };\n\n    constructor(props) {\n        super(props);\n        const itemSize = props.dimensions;\n        const columnWidth = this.getColumnWidth(itemSize);\n        const rowHeight = this.getRowHeight(itemSize);   \n        this.state = {\n            itemSize,\n            columnWidth,\n            rowHeight,\n        };\n    }\n\n    getColumnWidth(size) {\n        return size.width + this.props.distance;\n    }\n\n    getColumnCount(gridWidth, columnWidth) {\n        return Math.floor(gridWidth / columnWidth);\n    }\n\n    getRowHeight(size) {\n        return size.height + this.props.distance;\n    }\n\n    getRowCount(columnCount) {\n        return Math.ceil(this.props.collection.length / columnCount);\n    }\n\n    cellRenderer(columnCount) {\n        return ({columnIndex, key, rowIndex, style}) => {\n            const {\n                collection,\n                dimensions: {width, height},\n            } = this.props;\n            const index = (rowIndex * columnCount) + columnIndex;\n            const color = getItemColor(index);\n            const item = collection[index];\n            if (index >= collection.length) {\n                return null;\n            } \n            return (\n                    <div\n                        key={key}\n                        style={{\n                            ...style,\n                            ...itemStyle,\n                            backgroundColor: color,\n                            width, \n                            height,\n                        }}\n                    >\n                        {item}\n                    </div>\n            );\n        };\n    }\n\n    render() {\n        const {columnWidth, rowHeight} = this.state;\n        return (\n            <AutoSizer disableHeight>\n                {\n                    ({width}) => {\n                        const columnCount = this.getColumnCount(width, columnWidth);\n                        const rowCount = this.getRowCount(columnCount);\n                        const cellRenderer = this.cellRenderer(columnCount, columnWidth);\n                        return (\n                            <WindowScroller>\n                                {\n                                    ({height, isScrolling, scrollTop}) => (\n                                        <Grid\n                                            autoHeight\n                                            isScrolling={isScrolling}\n                                            scrollTop={scrollTop}    \n                                            cellRenderer={cellRenderer}\n                                            cellRangeRenderer={this.cellRangeRenderer}\n                                            columnCount={columnCount}\n                                            columnWidth={columnWidth}\n                                            rowCount={rowCount}\n                                            rowHeight={rowHeight}\n                                            estimatedColumnSizex\n                                            overscanRowCount={3} \n                                            height={height}\n                                            width={width}\n                                        />\n                                    )\n                                }\n                            </WindowScroller>\n                        );\n                    }\n                }\n            </AutoSizer>\n        );\n    }\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BasicCollection from './components/VirtualCollectionBasic';\n\nclass App extends Component {\n  render() {\n    const collection = Array(1000).fill(1).map((item, index) => index);\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n          <div className=\"App-header__left\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h2>Virtualized Grids</h2>\n          </div>\n          <a href=\"https://github.com/makdv/react-virtualized-examples\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <svg version=\"1.1\" width=\"30\" height=\"30\" viewBox=\"0 0 16 16\" fill=\"white\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"></path></svg>\n          </a>\n        </div>\n        <p className=\"App-intro\">\n          <BasicCollection collection={collection} />\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}